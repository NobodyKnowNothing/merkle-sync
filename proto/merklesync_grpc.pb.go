// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/merklesync.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MerkleSync_SubmitBlock_FullMethodName   = "/merklesync.MerkleSync/SubmitBlock"
	MerkleSync_GetMerkleRoot_FullMethodName = "/merklesync.MerkleSync/GetMerkleRoot"
	MerkleSync_GenerateProof_FullMethodName = "/merklesync.MerkleSync/GenerateProof"
	MerkleSync_VerifyProof_FullMethodName   = "/merklesync.MerkleSync/VerifyProof"
	MerkleSync_DiffTrees_FullMethodName     = "/merklesync.MerkleSync/DiffTrees"
)

// MerkleSyncClient is the client API for MerkleSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerkleSyncClient interface {
	// Submit encrypted data block for Merkle tree construction
	SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error)
	// Get current Merkle root
	GetMerkleRoot(ctx context.Context, in *GetMerkleRootRequest, opts ...grpc.CallOption) (*GetMerkleRootResponse, error)
	// Generate Merkle proof for specific leaf hashes
	GenerateProof(ctx context.Context, in *GenerateProofRequest, opts ...grpc.CallOption) (*GenerateProofResponse, error)
	// Verify Merkle proof
	VerifyProof(ctx context.Context, in *VerifyProofRequest, opts ...grpc.CallOption) (*VerifyProofResponse, error)
	// Get tree differences between two roots
	DiffTrees(ctx context.Context, in *DiffTreesRequest, opts ...grpc.CallOption) (*DiffTreesResponse, error)
}

type merkleSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewMerkleSyncClient(cc grpc.ClientConnInterface) MerkleSyncClient {
	return &merkleSyncClient{cc}
}

func (c *merkleSyncClient) SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error) {
	out := new(SubmitBlockResponse)
	err := c.cc.Invoke(ctx, MerkleSync_SubmitBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleSyncClient) GetMerkleRoot(ctx context.Context, in *GetMerkleRootRequest, opts ...grpc.CallOption) (*GetMerkleRootResponse, error) {
	out := new(GetMerkleRootResponse)
	err := c.cc.Invoke(ctx, MerkleSync_GetMerkleRoot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleSyncClient) GenerateProof(ctx context.Context, in *GenerateProofRequest, opts ...grpc.CallOption) (*GenerateProofResponse, error) {
	out := new(GenerateProofResponse)
	err := c.cc.Invoke(ctx, MerkleSync_GenerateProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleSyncClient) VerifyProof(ctx context.Context, in *VerifyProofRequest, opts ...grpc.CallOption) (*VerifyProofResponse, error) {
	out := new(VerifyProofResponse)
	err := c.cc.Invoke(ctx, MerkleSync_VerifyProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleSyncClient) DiffTrees(ctx context.Context, in *DiffTreesRequest, opts ...grpc.CallOption) (*DiffTreesResponse, error) {
	out := new(DiffTreesResponse)
	err := c.cc.Invoke(ctx, MerkleSync_DiffTrees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerkleSyncServer is the server API for MerkleSync service.
// All implementations must embed UnimplementedMerkleSyncServer
// for forward compatibility
type MerkleSyncServer interface {
	// Submit encrypted data block for Merkle tree construction
	SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error)
	// Get current Merkle root
	GetMerkleRoot(context.Context, *GetMerkleRootRequest) (*GetMerkleRootResponse, error)
	// Generate Merkle proof for specific leaf hashes
	GenerateProof(context.Context, *GenerateProofRequest) (*GenerateProofResponse, error)
	// Verify Merkle proof
	VerifyProof(context.Context, *VerifyProofRequest) (*VerifyProofResponse, error)
	// Get tree differences between two roots
	DiffTrees(context.Context, *DiffTreesRequest) (*DiffTreesResponse, error)
	mustEmbedUnimplementedMerkleSyncServer()
}

// UnimplementedMerkleSyncServer must be embedded to have forward compatible implementations.
type UnimplementedMerkleSyncServer struct {
}

func (UnimplementedMerkleSyncServer) SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlock not implemented")
}
func (UnimplementedMerkleSyncServer) GetMerkleRoot(context.Context, *GetMerkleRootRequest) (*GetMerkleRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerkleRoot not implemented")
}
func (UnimplementedMerkleSyncServer) GenerateProof(context.Context, *GenerateProofRequest) (*GenerateProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateProof not implemented")
}
func (UnimplementedMerkleSyncServer) VerifyProof(context.Context, *VerifyProofRequest) (*VerifyProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyProof not implemented")
}
func (UnimplementedMerkleSyncServer) DiffTrees(context.Context, *DiffTreesRequest) (*DiffTreesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiffTrees not implemented")
}
func (UnimplementedMerkleSyncServer) mustEmbedUnimplementedMerkleSyncServer() {}

// UnsafeMerkleSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerkleSyncServer will
// result in compilation errors.
type UnsafeMerkleSyncServer interface {
	mustEmbedUnimplementedMerkleSyncServer()
}

func RegisterMerkleSyncServer(s grpc.ServiceRegistrar, srv MerkleSyncServer) {
	s.RegisterService(&MerkleSync_ServiceDesc, srv)
}

func _MerkleSync_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleSyncServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerkleSync_SubmitBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleSyncServer).SubmitBlock(ctx, req.(*SubmitBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleSync_GetMerkleRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerkleRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleSyncServer).GetMerkleRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerkleSync_GetMerkleRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleSyncServer).GetMerkleRoot(ctx, req.(*GetMerkleRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleSync_GenerateProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleSyncServer).GenerateProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerkleSync_GenerateProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleSyncServer).GenerateProof(ctx, req.(*GenerateProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleSync_VerifyProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleSyncServer).VerifyProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerkleSync_VerifyProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleSyncServer).VerifyProof(ctx, req.(*VerifyProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleSync_DiffTrees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiffTreesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleSyncServer).DiffTrees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerkleSync_DiffTrees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleSyncServer).DiffTrees(ctx, req.(*DiffTreesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MerkleSync_ServiceDesc is the grpc.ServiceDesc for MerkleSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerkleSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "merklesync.MerkleSync",
	HandlerType: (*MerkleSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBlock",
			Handler:    _MerkleSync_SubmitBlock_Handler,
		},
		{
			MethodName: "GetMerkleRoot",
			Handler:    _MerkleSync_GetMerkleRoot_Handler,
		},
		{
			MethodName: "GenerateProof",
			Handler:    _MerkleSync_GenerateProof_Handler,
		},
		{
			MethodName: "VerifyProof",
			Handler:    _MerkleSync_VerifyProof_Handler,
		},
		{
			MethodName: "DiffTrees",
			Handler:    _MerkleSync_DiffTrees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/merklesync.proto",
}
