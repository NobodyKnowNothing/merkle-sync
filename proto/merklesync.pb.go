// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: proto/merklesync.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Data block with encryption
type DataBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EncryptedData []byte            `protobuf:"bytes,2,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
	TableName     string            `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Operation     string            `protobuf:"bytes,4,opt,name=operation,proto3" json:"operation,omitempty"` // INSERT, UPDATE, DELETE
	Timestamp     int64             `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Metadata      map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DataBlock) Reset() {
	*x = DataBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_merklesync_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataBlock) ProtoMessage() {}

func (x *DataBlock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_merklesync_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataBlock.ProtoReflect.Descriptor instead.
func (*DataBlock) Descriptor() ([]byte, []int) {
	return file_proto_merklesync_proto_rawDescGZIP(), []int{0}
}

func (x *DataBlock) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataBlock) GetEncryptedData() []byte {
	if x != nil {
		return x.EncryptedData
	}
	return nil
}

func (x *DataBlock) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *DataBlock) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *DataBlock) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DataBlock) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Submit block request
type SubmitBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *DataBlock `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *SubmitBlockRequest) Reset() {
	*x = SubmitBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_merklesync_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBlockRequest) ProtoMessage() {}

func (x *SubmitBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_merklesync_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBlockRequest.ProtoReflect.Descriptor instead.
func (*SubmitBlockRequest) Descriptor() ([]byte, []int) {
	return file_proto_merklesync_proto_rawDescGZIP(), []int{1}
}

func (x *SubmitBlockRequest) GetBlock() *DataBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

// Submit block response
type SubmitBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerkleRoot   string `protobuf:"bytes,1,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	LeafHash     string `protobuf:"bytes,2,opt,name=leaf_hash,json=leafHash,proto3" json:"leaf_hash,omitempty"`
	Success      bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *SubmitBlockResponse) Reset() {
	*x = SubmitBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_merklesync_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBlockResponse) ProtoMessage() {}

func (x *SubmitBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_merklesync_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBlockResponse.ProtoReflect.Descriptor instead.
func (*SubmitBlockResponse) Descriptor() ([]byte, []int) {
	return file_proto_merklesync_proto_rawDescGZIP(), []int{2}
}

func (x *SubmitBlockResponse) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *SubmitBlockResponse) GetLeafHash() string {
	if x != nil {
		return x.LeafHash
	}
	return ""
}

func (x *SubmitBlockResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SubmitBlockResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Get Merkle root request
type GetMerkleRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"` // Optional: filter by table
}

func (x *GetMerkleRootRequest) Reset() {
	*x = GetMerkleRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_merklesync_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerkleRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerkleRootRequest) ProtoMessage() {}

func (x *GetMerkleRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_merklesync_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerkleRootRequest.ProtoReflect.Descriptor instead.
func (*GetMerkleRootRequest) Descriptor() ([]byte, []int) {
	return file_proto_merklesync_proto_rawDescGZIP(), []int{3}
}

func (x *GetMerkleRootRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

// Get Merkle root response
type GetMerkleRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerkleRoot string `protobuf:"bytes,1,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	BlockCount int64  `protobuf:"varint,2,opt,name=block_count,json=blockCount,proto3" json:"block_count,omitempty"`
	Timestamp  int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetMerkleRootResponse) Reset() {
	*x = GetMerkleRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_merklesync_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerkleRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerkleRootResponse) ProtoMessage() {}

func (x *GetMerkleRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_merklesync_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerkleRootResponse.ProtoReflect.Descriptor instead.
func (*GetMerkleRootResponse) Descriptor() ([]byte, []int) {
	return file_proto_merklesync_proto_rawDescGZIP(), []int{4}
}

func (x *GetMerkleRootResponse) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *GetMerkleRootResponse) GetBlockCount() int64 {
	if x != nil {
		return x.BlockCount
	}
	return 0
}

func (x *GetMerkleRootResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Generate proof request
type GenerateProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerkleRoot string   `protobuf:"bytes,1,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	LeafHashes []string `protobuf:"bytes,2,rep,name=leaf_hashes,json=leafHashes,proto3" json:"leaf_hashes,omitempty"`
}

func (x *GenerateProofRequest) Reset() {
	*x = GenerateProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_merklesync_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateProofRequest) ProtoMessage() {}

func (x *GenerateProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_merklesync_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateProofRequest.ProtoReflect.Descriptor instead.
func (*GenerateProofRequest) Descriptor() ([]byte, []int) {
	return file_proto_merklesync_proto_rawDescGZIP(), []int{5}
}

func (x *GenerateProofRequest) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *GenerateProofRequest) GetLeafHashes() []string {
	if x != nil {
		return x.LeafHashes
	}
	return nil
}

// Merkle proof node
type ProofNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash   string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	IsLeft bool   `protobuf:"varint,2,opt,name=is_left,json=isLeft,proto3" json:"is_left,omitempty"` // true if this is a left child, false if right
}

func (x *ProofNode) Reset() {
	*x = ProofNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_merklesync_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofNode) ProtoMessage() {}

func (x *ProofNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_merklesync_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofNode.ProtoReflect.Descriptor instead.
func (*ProofNode) Descriptor() ([]byte, []int) {
	return file_proto_merklesync_proto_rawDescGZIP(), []int{6}
}

func (x *ProofNode) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ProofNode) GetIsLeft() bool {
	if x != nil {
		return x.IsLeft
	}
	return false
}

// Generate proof response
type GenerateProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofPath    []*ProofNode `protobuf:"bytes,1,rep,name=proof_path,json=proofPath,proto3" json:"proof_path,omitempty"`
	Success      bool         `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string       `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *GenerateProofResponse) Reset() {
	*x = GenerateProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_merklesync_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateProofResponse) ProtoMessage() {}

func (x *GenerateProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_merklesync_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateProofResponse.ProtoReflect.Descriptor instead.
func (*GenerateProofResponse) Descriptor() ([]byte, []int) {
	return file_proto_merklesync_proto_rawDescGZIP(), []int{7}
}

func (x *GenerateProofResponse) GetProofPath() []*ProofNode {
	if x != nil {
		return x.ProofPath
	}
	return nil
}

func (x *GenerateProofResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GenerateProofResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Verify proof request
type VerifyProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerkleRoot string       `protobuf:"bytes,1,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	LeafHashes []string     `protobuf:"bytes,2,rep,name=leaf_hashes,json=leafHashes,proto3" json:"leaf_hashes,omitempty"`
	ProofPath  []*ProofNode `protobuf:"bytes,3,rep,name=proof_path,json=proofPath,proto3" json:"proof_path,omitempty"`
}

func (x *VerifyProofRequest) Reset() {
	*x = VerifyProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_merklesync_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyProofRequest) ProtoMessage() {}

func (x *VerifyProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_merklesync_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyProofRequest.ProtoReflect.Descriptor instead.
func (*VerifyProofRequest) Descriptor() ([]byte, []int) {
	return file_proto_merklesync_proto_rawDescGZIP(), []int{8}
}

func (x *VerifyProofRequest) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *VerifyProofRequest) GetLeafHashes() []string {
	if x != nil {
		return x.LeafHashes
	}
	return nil
}

func (x *VerifyProofRequest) GetProofPath() []*ProofNode {
	if x != nil {
		return x.ProofPath
	}
	return nil
}

// Verify proof response
type VerifyProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid        bool   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *VerifyProofResponse) Reset() {
	*x = VerifyProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_merklesync_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyProofResponse) ProtoMessage() {}

func (x *VerifyProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_merklesync_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyProofResponse.ProtoReflect.Descriptor instead.
func (*VerifyProofResponse) Descriptor() ([]byte, []int) {
	return file_proto_merklesync_proto_rawDescGZIP(), []int{9}
}

func (x *VerifyProofResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *VerifyProofResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Tree difference node
type DiffNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash     string      `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	IsLeaf   bool        `protobuf:"varint,2,opt,name=is_leaf,json=isLeaf,proto3" json:"is_leaf,omitempty"`
	Children []*DiffNode `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
	Block    *DataBlock  `protobuf:"bytes,4,opt,name=block,proto3" json:"block,omitempty"` // Only present for leaf nodes
}

func (x *DiffNode) Reset() {
	*x = DiffNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_merklesync_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffNode) ProtoMessage() {}

func (x *DiffNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_merklesync_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffNode.ProtoReflect.Descriptor instead.
func (*DiffNode) Descriptor() ([]byte, []int) {
	return file_proto_merklesync_proto_rawDescGZIP(), []int{10}
}

func (x *DiffNode) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *DiffNode) GetIsLeaf() bool {
	if x != nil {
		return x.IsLeaf
	}
	return false
}

func (x *DiffNode) GetChildren() []*DiffNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *DiffNode) GetBlock() *DataBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

// Diff trees request
type DiffTreesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash_1 string `protobuf:"bytes,1,opt,name=root_hash_1,json=rootHash1,proto3" json:"root_hash_1,omitempty"`
	RootHash_2 string `protobuf:"bytes,2,opt,name=root_hash_2,json=rootHash2,proto3" json:"root_hash_2,omitempty"`
}

func (x *DiffTreesRequest) Reset() {
	*x = DiffTreesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_merklesync_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffTreesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffTreesRequest) ProtoMessage() {}

func (x *DiffTreesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_merklesync_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffTreesRequest.ProtoReflect.Descriptor instead.
func (*DiffTreesRequest) Descriptor() ([]byte, []int) {
	return file_proto_merklesync_proto_rawDescGZIP(), []int{11}
}

func (x *DiffTreesRequest) GetRootHash_1() string {
	if x != nil {
		return x.RootHash_1
	}
	return ""
}

func (x *DiffTreesRequest) GetRootHash_2() string {
	if x != nil {
		return x.RootHash_2
	}
	return ""
}

// Diff trees response
type DiffTreesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Differences  []*DiffNode `protobuf:"bytes,1,rep,name=differences,proto3" json:"differences,omitempty"`
	Success      bool        `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string      `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *DiffTreesResponse) Reset() {
	*x = DiffTreesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_merklesync_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffTreesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffTreesResponse) ProtoMessage() {}

func (x *DiffTreesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_merklesync_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffTreesResponse.ProtoReflect.Descriptor instead.
func (*DiffTreesResponse) Descriptor() ([]byte, []int) {
	return file_proto_merklesync_proto_rawDescGZIP(), []int{12}
}

func (x *DiffTreesResponse) GetDifferences() []*DiffNode {
	if x != nil {
		return x.Differences
	}
	return nil
}

func (x *DiffTreesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DiffTreesResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_proto_merklesync_proto protoreflect.FileDescriptor

var file_proto_merklesync_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x73, 0x79, 0x6e, 0x63, 0x22, 0x9b, 0x02, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x73,
	0x79, 0x6e, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x41, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x66, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x35, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x77, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x58, 0x0a, 0x14, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x66, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x22, 0x8c,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8c, 0x01,
	0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x66,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x50, 0x61, 0x74, 0x68, 0x22, 0x50, 0x0a, 0x13,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x96,
	0x01, 0x0a, 0x08, 0x44, 0x69, 0x66, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x52, 0x0a, 0x10, 0x44, 0x69, 0x66, 0x66, 0x54,
	0x72, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x31, 0x12, 0x1e, 0x0a, 0x0b, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x32, 0x22, 0x8a, 0x01, 0x0a, 0x11,
	0x44, 0x69, 0x66, 0x66, 0x54, 0x72, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x0b, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x73,
	0x79, 0x6e, 0x63, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x64, 0x69,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xa2, 0x03, 0x0a, 0x0a, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x4e, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x73,
	0x79, 0x6e, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x73,
	0x79, 0x6e, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a,
	0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x20,
	0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x44, 0x69, 0x66, 0x66, 0x54, 0x72, 0x65, 0x65, 0x73,
	0x12, 0x1c, 0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x44, 0x69,
	0x66, 0x66, 0x54, 0x72, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x44, 0x69, 0x66, 0x66,
	0x54, 0x72, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1d, 0x5a,
	0x1b, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x2d, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x2d, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_merklesync_proto_rawDescOnce sync.Once
	file_proto_merklesync_proto_rawDescData = file_proto_merklesync_proto_rawDesc
)

func file_proto_merklesync_proto_rawDescGZIP() []byte {
	file_proto_merklesync_proto_rawDescOnce.Do(func() {
		file_proto_merklesync_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_merklesync_proto_rawDescData)
	})
	return file_proto_merklesync_proto_rawDescData
}

var file_proto_merklesync_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_merklesync_proto_goTypes = []interface{}{
	(*DataBlock)(nil),             // 0: merklesync.DataBlock
	(*SubmitBlockRequest)(nil),    // 1: merklesync.SubmitBlockRequest
	(*SubmitBlockResponse)(nil),   // 2: merklesync.SubmitBlockResponse
	(*GetMerkleRootRequest)(nil),  // 3: merklesync.GetMerkleRootRequest
	(*GetMerkleRootResponse)(nil), // 4: merklesync.GetMerkleRootResponse
	(*GenerateProofRequest)(nil),  // 5: merklesync.GenerateProofRequest
	(*ProofNode)(nil),             // 6: merklesync.ProofNode
	(*GenerateProofResponse)(nil), // 7: merklesync.GenerateProofResponse
	(*VerifyProofRequest)(nil),    // 8: merklesync.VerifyProofRequest
	(*VerifyProofResponse)(nil),   // 9: merklesync.VerifyProofResponse
	(*DiffNode)(nil),              // 10: merklesync.DiffNode
	(*DiffTreesRequest)(nil),      // 11: merklesync.DiffTreesRequest
	(*DiffTreesResponse)(nil),     // 12: merklesync.DiffTreesResponse
	nil,                           // 13: merklesync.DataBlock.MetadataEntry
}
var file_proto_merklesync_proto_depIdxs = []int32{
	13, // 0: merklesync.DataBlock.metadata:type_name -> merklesync.DataBlock.MetadataEntry
	0,  // 1: merklesync.SubmitBlockRequest.block:type_name -> merklesync.DataBlock
	6,  // 2: merklesync.GenerateProofResponse.proof_path:type_name -> merklesync.ProofNode
	6,  // 3: merklesync.VerifyProofRequest.proof_path:type_name -> merklesync.ProofNode
	10, // 4: merklesync.DiffNode.children:type_name -> merklesync.DiffNode
	0,  // 5: merklesync.DiffNode.block:type_name -> merklesync.DataBlock
	10, // 6: merklesync.DiffTreesResponse.differences:type_name -> merklesync.DiffNode
	1,  // 7: merklesync.MerkleSync.SubmitBlock:input_type -> merklesync.SubmitBlockRequest
	3,  // 8: merklesync.MerkleSync.GetMerkleRoot:input_type -> merklesync.GetMerkleRootRequest
	5,  // 9: merklesync.MerkleSync.GenerateProof:input_type -> merklesync.GenerateProofRequest
	8,  // 10: merklesync.MerkleSync.VerifyProof:input_type -> merklesync.VerifyProofRequest
	11, // 11: merklesync.MerkleSync.DiffTrees:input_type -> merklesync.DiffTreesRequest
	2,  // 12: merklesync.MerkleSync.SubmitBlock:output_type -> merklesync.SubmitBlockResponse
	4,  // 13: merklesync.MerkleSync.GetMerkleRoot:output_type -> merklesync.GetMerkleRootResponse
	7,  // 14: merklesync.MerkleSync.GenerateProof:output_type -> merklesync.GenerateProofResponse
	9,  // 15: merklesync.MerkleSync.VerifyProof:output_type -> merklesync.VerifyProofResponse
	12, // 16: merklesync.MerkleSync.DiffTrees:output_type -> merklesync.DiffTreesResponse
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_merklesync_proto_init() }
func file_proto_merklesync_proto_init() {
	if File_proto_merklesync_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_merklesync_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_merklesync_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_merklesync_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_merklesync_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerkleRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_merklesync_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerkleRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_merklesync_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_merklesync_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_merklesync_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_merklesync_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_merklesync_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_merklesync_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_merklesync_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffTreesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_merklesync_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffTreesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_merklesync_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_merklesync_proto_goTypes,
		DependencyIndexes: file_proto_merklesync_proto_depIdxs,
		MessageInfos:      file_proto_merklesync_proto_msgTypes,
	}.Build()
	File_proto_merklesync_proto = out.File
	file_proto_merklesync_proto_rawDesc = nil
	file_proto_merklesync_proto_goTypes = nil
	file_proto_merklesync_proto_depIdxs = nil
}
